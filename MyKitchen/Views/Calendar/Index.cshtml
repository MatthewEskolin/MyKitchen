@model MyKitchen.Controllers.SearchModel
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .button-container
    {
        display:flex;
    }
    .search-bar
    {
        border:1px solid blue;
    }
    
    <!-- styles for draggable -->
    .ditem-container 
    {
        display: inline-flex !important; /* Use flexbox to align child divs horizontally */
    }
    
    .draggableitem-2
    {
        padding:4px;
    }
    
    .custom-event {
        cursor: pointer;
        display: inline-flex;
    }


    .square {
        width: 25px; /* Adjust the width of the square as needed */
        height: 25px;; /* Square dimensions */
/*        background-color: orange; /* Background color for the square */
        display: flex;
        justify-content: center;
        align-items: center;
        border:1px solid orange;
    }

    .text-rectangle {
        padding: 0px; /* Add padding to the text rectangle */
/*        background-color: orange; /* Background color for the text rectangle */
        color: black; /* Text color for the text rectangle */
        border:1px solid orange;
    }

    .square img {
        max-width: 100%; /* Ensure the image doesn't exceed the square dimensions */
        max-height: 100%; /* Ensure the image doesn't exceed the square dimensions */
    }

    /* Add custom styling for the search form container */
    .search-form-container {
        background-color: #f5f5f5; /* Background color */
        border: 1px solid #ddd; /* Border */
        padding: 20px; /* Padding */
        border-radius: 5px; /* Rounded corners */
    }

    .page-number input {
        background: none;
        border: none;
        color: blue; /* You can change the color to match your design */
        text-decoration: underline;
        cursor: pointer;
    }

    /* Style the selected page number differently */
    .page-number.selected input {
        color: red; /* Change the color to highlight the selected page */
        text-decoration: none; /* Remove underline from the selected page */
        font-weight: bold; /* You can use a different style, e.g., bold */
    }
    
    .page-number input.selected {
        color: red; /* Change the color to highlight the selected page */
        text-decoration: none; /* Remove underline from the selected page */
        font-weight: bold; /* You can use a different style, e.g., bold */

    }


</style>

<!-- tempate for draggables -->
<div style="display:none;">
        <div class="draggableitem2">
            <div class="square">
                <img src="/images/tang48.png" alt="Icon">
            </div>
            <div class="text-rectangle">
                Yum ! Potatoes
            </div>
        </div>
</div>

<form id="fmSearchItems" name="searchForm" method="post" asp-action="SearchForItems">
    
    <div class="search-form-container">
        <div class="input-group mb-3 search-bar">
            <input class="input-text form-control col-12" type="text" name="searchText" placeholder="Search..." aria-label="Search" aria-described="search-button"/>
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" type="button" id="search-button">
                    <i class="icon fa fa-search" style="cursor:pointer;" onclick="$('#fmSearchItems').submit()"></i>
                </button>
            </div>
        </div>
        <div class="form-check form-check-inline">
            <input id="inmealsonly" type="checkbox" class="form-check-input" name="CbShowMealsOnly" value="1" />
            <label class="form-check-label" for="inmealsonly">Meals Only</label>
        </div>
        <div class="form-check form-check-inline">
            <input id="inqueued" type="checkbox" class="form-check-input" name="CbShowQueuedOnly" value="1" />
            <label class="form-check-label" for="inqueued">Queued Only</label>
        </div>
    </div>

    <div id="itemContainer"> </div>

    <!-- Pagination -->
    <div class="pagination">
        <div class="button-container">
            <!-- Wrap each input with a div and give them unique IDs or classes -->
            <div id="previousButtonDiv">
                <input id="inPrevious" type="submit" value="Previous" onclick="setAction('previous')" />
            </div>
            <!-- Generate numbered page inputs -->
            @for (int i = 1; i <= @Model.TotalPages; i++)
            {
                <div class="page-number">
                    <input id="pageNumber_@i" type="submit" value="@i" onclick="setAction('goToPage', @i)" />
                </div>
            }
            <div id="nextButtonDiv">
                <input id="inNext" type="submit" value="Next" onclick="setAction('next')" />
            </div>
        </div>
    </div>

    <input type="hidden" id="idPageSize" name="pageSize" value="@Model.PageSize" />
    <input type="hidden" id="idPageIndex" name="pageIndex" value="@Model.PageIndex" />
    <input type="hidden" id="idTotalPages" name="pageIndex" value="@Model.TotalPages" />
    <input type="hidden" name="action" value="" />
</form>

<div style="clear: both;"></div>
<div id="calendar">
</div>


@*<link rel="stylesheet" type="text/css" href="/lib/fullcalendar/core/main.min.css" />
<link rel="stylesheet" type="text/css" href="/lib/fullcalendar/daygrid/main.min.css" />*@

@section Scripts
{

    @*    <script src="/lib/fullcalendar/core/main.min.js"></script>
    <script src="/lib/fullcalendar/daygrid/main.min.js"></script>
    <script src="/lib/fullcalendar/interaction/main.min.js"></script>
    @*<script src="/lib/superagent/superagent.js"></script>

    *@

<script type="text/javascript">
    
        //var theCalendar = null;
        //var eventSources = [
        //    {
        //        url: "/calendar/GetEventsFeed",
        //        method: 'GET',
        //        failure: function () {
        //            alert('could not load items');
        //        },
        //        color: 'blue',
        //        textColor: 'black'
        //    }
        //];

        
        //$(document).ready(function () {
        //    var events = [];

        //    GenerateCalendar(eventSources);

        //    var form = $("#fmSearchItems");
        //    var formData = form.serialize();

        ////Get Available Food Items & Meals
        //$.ajax({
        //        type: "POST",
        //        url: "/calendar/SearchForItems",
        //        data: formData,
        //        success: function (data) {
        //            ResultsReceived(data);
        //        },
        //        error: function (error) {
        //            // Handle errors gracefully
        //            alert('Failed: ' + error.statusText);
        //        }
        //        });

        ////Add Search Event Handler 
        //$("#fmSearchItems").submit(function (event) {
                
        //        var formData = $(this).serialize();

        //        $.ajax({
        //            type: "POST",
        //            url: "/calendar/SearchForItems",
        //            data: formData
        //        }).done(function (data) {
        //            ResultsReceived(data);
        //        });
                
        //        //do not do a normal form submit - ajax call replaces normal http post
        //        event.preventDefault();
        //    });
           
        //});            

        function ResultsReceived(data)
            {
                // Initialize the availableItems array
                window.availableItems = [];
                
                // Cache the itemContainer element for better performance
                var itemContainer = $("#itemContainer");
                $(itemContainer).empty();
                
                //save page model results to hidden fields
                $("#idPageSize").val(data.pageSize);
                $("#idPageIndex").val(data.pageIndex);
                $("#idTotalPages").val(data.totalPages);
                
                NextButtonDisplay() 
                ShowPreviousDisplay() 

                // Iterate through the data array
                $.each(data.items, function (i, v) {
                    // Push the item to the availableItems array
                    window.availableItems.push(v);

                    // Escape single quotes in the item name
                    var escapedItemName = v.itemName.replace(/'/g, "&#39;");

                    // Create the dataEvent object as a JavaScript object
                    var dataEvent = {
                        itemId: v.itemId,
                        title: escapedItemName,
                        itemType: v.itemType
                    };

                    // Determine the CSS class based on item type
                    var itemClass = v.itemType === "MEAL" ? "draggableitem-meal" : "draggableitem-foodItem";

                    // Create the div element and append it to the itemContainer
                    //var $newDiv = $("<div>", {
                    //    class: "draggableitem " + itemClass,
                    //    "data-event": JSON.stringify(dataEvent),
                    //    text: v.itemName
                    //});
                    
                    var $draggable = $(".draggableitem2:first").clone();

                    $draggable.find(".text-rectangle").text(v.itemName);
                    $draggable.attr("data-event", JSON.stringify(dataEvent));


                    // Append the clone to the container
                    itemContainer.append($draggable);

                    //itemContainer.append($newDiv);
                });
            }


        //Utilities
        
        function getPageIndex()
        {
            return $("#idPageIndex").val();
        }

        function setAction(actionName,goToPage) {
            

            

            // Set the value of the hidden input field based on the clicked button
            document.querySelector('input[name="action"]').value = actionName;

            if (actionName == "next") {
                var $elem = $("#idPageIndex");

                var pageIndex = Number($("#idPageIndex").val());
                var newValue = pageIndex + 1;

                $elem.val(newValue);

            }
            if (actionName == "previous") {
                var $elem = $("#idPageIndex");

                var pageIndex = Number($("#idPageIndex").val());
                var newValue = pageIndex - 1;

                $elem.val(newValue);

            }
            if(actionName == "goToPage")
            {
                var $elem = $("#idPageIndex");
                var pageIndex = Number($("#idPageIndex").val());
                var newValue = Number(goToPage) - 1;

                $elem.val(newValue);
            }
            
            updatePageLinks(getPageIndex());

        }
        
        function updatePageLinks(goToPage)
        {
            //clear selected
            $(".page-number > input").removeClass("selected");

            var $selectedPageNumber = $("#pageNumber_" + goToPage);
            $selectedPageNumber.addClass("selected");
        }


        function SetVisible(visible, id)
        {
            if(visible)
            {
                $('#' + id).show();
            }
            else
            {
                $('#' + id).hide();
            }
        }

        function NextButtonDisplay()
        {
            var pageIndex = $("#idPageIndex").val();
            var totalPages = $("#idTotalPages").val();

            var show =  pageIndex < totalPages;
            SetVisible("nextButtonDiv",show)
            
        }

        function ShowPreviousDisplay()
        {
            var pageIndex = $("#idPageIndex").val();
            var totalPages = $("#idTotalPages").val();

            var show = pageIndex > 1;
            SetVisible("previousButtonDiv",show);
        }

    </script>

}


@section Selenium
    {
    <div class="e2e-page-calendar-action-index"></div>

}

