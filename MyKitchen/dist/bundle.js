/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./wwwroot/js/site.js":
/*!****************************!*\
  !*** ./wwwroot/js/site.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n\n\n//* ADD ALL FULLCALENDAR CODE HERE *//\nvar theCalendar = null;\nvar eventSources = [{\n  url: \"/calendar/GetEventsFeed\",\n  method: 'GET',\n  failure: function () {\n    alert('could not load items');\n  },\n  color: 'blue',\n  textColor: 'black'\n}];\n$(document).ready(function () {\n  var events = [];\n  GenerateCalendar(eventSources);\n  var form = $(\"#fmSearchItems\");\n  var formData = form.serialize();\n\n  //Get Available Food Items & Meals\n  $.ajax({\n    type: \"POST\",\n    url: \"/calendar/SearchForItems\",\n    data: formData,\n    success: function (data) {\n      ResultsReceived(data);\n    },\n    error: function (error) {\n      // Handle errors gracefully\n      alert('Failed: ' + error.statusText);\n    }\n  });\n\n  //Add Search Event Handler \n  $(\"#fmSearchItems\").submit(function (event) {\n    var formData = $(this).serialize();\n    $.ajax({\n      type: \"POST\",\n      url: \"/calendar/SearchForItems\",\n      data: formData\n    }).done(function (data) {\n      ResultsReceived(data);\n    });\n\n    //do not do a normal form submit - ajax call replaces normal http post\n    event.preventDefault();\n  });\n\n  //Create Calendar\n  function GenerateCalendar(eventSources) {\n    var calendarEl = document.getElementById('calendar');\n    var draggableEL = document.getElementById('itemContainer');\n    //var draggableEL2 = document.getElementById('itemContainer2');\n    var Draggable = FullCalendarInteraction.Draggable;\n    theCalendar = new FullCalendar.Calendar(calendarEl, {\n      plugins: ['dayGrid', 'interaction'],\n      eventSources: eventSources,\n      editable: true,\n      droppable: true,\n      fixedWeekCount: false,\n      height: 600,\n      displayEventTime: false,\n      footer: {\n        left: 'custom1'\n      },\n      eventRender: function (info) {\n        $(info.el).find('.fc-content').append(\"<img style='width:28px;height:28px;float:right;' id='svg-delete-event' src='/images/red-trash-delete-icon.svg' />\");\n        if (info.event.extendedProps.mealID != null || info.event.extendedProps.itemType == \"MEAL\") {\n          info.el.style.backgroundColor = \"orange\";\n          info.el.style.color = \"white\";\n        } else {\n          info.el.style.backgroundColor = \"blue\";\n          info.el.style.color = \"white\";\n        }\n        $(info.el).find(\"#svg-delete-event\").click(function (event) {\n          //clicking delete should only trigger the click event for the trash can icon here, and should not trigger the click event for the entire event which would bring user to details view.\n          event.stopPropagation();\n          //remove event from calendar\n          info.event.remove();\n\n          //also remove from backend stroage\n          $.ajax({\n            url: '/calendar/RemoveEvent/',\n            data: JSON.stringify({\n              Subject: info.event.title,\n              Start: info.event.start,\n              IsFullDay: \"true\",\n              EventID: info.event.extendedProps.eventID\n            }),\n            type: \"POST\",\n            contentType: 'application/json; charset=utf-8',\n            success: function (json) {\n              console.log(\"Delete Event returned\");\n            },\n            failure: function (json) {\n              console.log(\"Delete Event failed.\");\n            }\n          });\n        });\n        $(info.el).find(\"#svg-delete-event\").mouseover(function () {\n          $(this).attr(\"src\", \"/images/red-trash-delete-icon-hover.svg\");\n        });\n        $(info.el).find(\"#svg-delete-event\").mouseout(function () {\n          $(this).attr(\"src\", \"/images/red-trash-delete-icon.svg\");\n        });\n        $(info.el).find(\"#svg-delete-event\").hide();\n      },\n      eventContent: function (arg) {\n        var customData = arg.event.extendedProps.customData;\n        return {\n          html: `<div class=\"custom-event\">${arg.timeText} - ${arg.event.title} - ${customData}</div>`\n        };\n      },\n      eventClick: function (info) {\n        //if food item, redirect to food item\n        if (info.event.extendedProps.itemType == \"FOOD ITEM\") {\n          window.location.href = \"/FoodItems/Details/\" + info.event.extendedProps.itemId;\n        } else if (info.event.extendedProps.itemType == \"MEAL\") {\n          window.location.href = \"/MealBuilder/MealDetails/\" + info.event.extendedProps.itemId;\n          ;\n        } else {\n          window.location.href = \"/FoodItems/Details/\" + info.event.extendedProps.foodItemID;\n\n          //if meal, redirect to meal\n          //TODO NOT IMPLEMENTED\n        }\n      },\n\n      eventMouseEnter: function (info) {\n        //find remove button and make it visible\n        $(info.el).find('#svg-delete-event').show();\n      },\n      eventMouseLeave: function (info) {\n        //find remove button and make it visible\n        $(info.el).find('#svg-delete-event').hide();\n      },\n      eventDrop: function (info) {\n        $.ajax({\n          url: '/calendar/UpdateEvent',\n          data: JSON.stringify({\n            Subject: info.event.title,\n            Start: info.event.start,\n            IsFullDay: \"true\",\n            EventID: info.event.extendedProps.eventID\n          }),\n          type: \"POST\",\n          contentType: 'application/json; charset=utf-8',\n          success: function (json) {\n            console.log(\"Update Event returned\");\n          },\n          failure: function (json) {\n            console.log(\"Update Event failed.\");\n          }\n        });\n      },\n      eventReceive: function (info) {\n        var mealId, foodItemId;\n        var sitemId = info.event.extendedProps.itemId;\n        var foodItem = window.availableItems.find(x => x.itemId == sitemId);\n        if (foodItem.itemType == \"FOOD ITEM\") {\n          foodItemId = foodItem.itemId;\n          mealId = null;\n        } else if (foodItem.itemType == \"MEAL\") {\n          mealId = foodItem.itemId;\n          foodItemId = null;\n        }\n        $.ajax({\n          url: '/calendar/SaveNewEvent',\n          data: JSON.stringify({\n            Subject: foodItem.itemName,\n            Start: info.event.start,\n            IsFullDay: \"true\",\n            FoodItemId: foodItemId,\n            MealID: mealId\n          }),\n          type: \"POST\",\n          //contentType: 'application/x-www-form-urlencoded',\n          contentType: 'application/json; charset=utf-8',\n          //contentType:'json',\n          success: function (json) {\n            console.log(\"SaveNewEvent returned\");\n            info.event.setExtendedProp(\"eventID\", json);\n          },\n          failure: function (json) {\n            console.log(\"SaveNewEvent failed.\");\n          }\n        });\n      },\n      customButtons: {\n        custom1: {\n          text: 'Clear Month',\n          click: function (whatisthis) {\n            var curMonth = theCalendar.getDate().getMonth();\n\n            //call ajax to remove all events in the current month\n            $.ajax({\n              url: '/calendar/ClearMonth',\n              data: JSON.stringify({\n                Month: curMonth\n              }),\n              type: \"POST\",\n              contentType: 'application/json; charset=utf-8',\n              success: function (json) {\n                console.log(\"Clear month returned\");\n                theCalendar.getEventSources()[0].refetch();\n              },\n              failure: function (json) {\n                console.log(\"Clear month failed\");\n              }\n            });\n\n            //reload calendar from db\n\n            alert('clicked custom button does this trigger build? DEBUG TEST!');\n          }\n        }\n      }\n    });\n    theCalendar.render();\n    new Draggable(draggableEL, {\n      itemSelector: '.draggableitem2',\n      longPressDelay: 200\n    });\n\n    //new Draggable(draggableEL2,\n    //    {\n    //        itemSelector: '.draggableitem2',\n    //        longPressDelay: 200\n    //    });\n  }\n});\n\n//# sourceURL=webpack:///./wwwroot/js/site.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./wwwroot/js/site.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;